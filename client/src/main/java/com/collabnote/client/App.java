/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.collabnote.client;

import com.collabnote.client.documentcrdt.CRDTDocument;
import com.collabnote.client.socket.ClientSocket;
import com.collabnote.client.socket.ClientSocketListener;
import com.collabnote.client.ui.MainFrame;
import com.collabnote.newcrdt.CRDT;
import com.collabnote.newcrdt.CRDTItem;
import com.collabnote.newcrdt.CRDTItemSerializable;
import com.collabnote.newcrdt.CRDTLocalListener;
import com.collabnote.newcrdt.gc.GCCRDT;
import com.collabnote.socket.DataPayload;
import com.collabnote.socket.Type;

import java.awt.EventQueue;
import java.io.IOException;
import java.util.List;

import org.apache.commons.lang3.RandomUtils;

public class App implements Controller, ClientSocketListener, CRDTLocalListener {
    private int agent;
    private MainFrame frame;

    private CRDT currentDoc;

    public CRDT getCRDT() {
        return currentDoc;
    }

    private CRDTDocument currentDocBinding;
    private ClientSocket clientSocket;
    private String shareID;

    public App(boolean visible) {
        this.agent = RandomUtils.nextInt();
        Controller controller = this;

        currentDocBinding = new CRDTDocument();
        currentDoc = new GCCRDT(agent, currentDocBinding, this);
        currentDocBinding.setCrdt(currentDoc);

        if (visible)
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    frame = new MainFrame(controller);
                    frame.setVisible(visible);
                }
            });
    }

    public static void main(String[] args) {
        new App(true);
    }

    @Override
    public void newNote() {
        if (clientSocket != null) {
            try {
                clientSocket.close();
            } catch (IOException e) {
            }
            clientSocket = null;
        }
        shareID = null;

        currentDocBinding = new CRDTDocument();
        currentDoc = new GCCRDT(agent, currentDocBinding, this);
        currentDocBinding.setCrdt(currentDoc);

        if (frame != null)
            frame.newEditorPanel(this);
    }

    @Override
    public void shareNote(String host) {
        ClientSocketListener mainListener = this;

        if (currentDoc == null)
            return;

        clientSocket = new ClientSocket(host, agent, new ClientSocketListener() {
            boolean isReady = false;

            @Override
            public void onStart() {
                // create share space
                clientSocket.sendData(new DataPayload(Type.SHARE, null, null, 0, null));
                mainListener.onStart();
            }

            @Override
            public void onReceiveData(DataPayload data) {
                if (isReady)
                    mainListener.onReceiveData(data);

                if (data.getType() == Type.SHARE) {
                    shareID = data.getShareID();
                    System.out.println(shareID);
                    isReady = true;

                    // upload crdt
                    for (CRDTItemSerializable crdtItem : currentDoc.serialize()) {
                        clientSocket.sendData(DataPayload.insertPayload(shareID, crdtItem));
                    }
                    clientSocket.sendData(new DataPayload(Type.SHARE, shareID, null, 0, null));
                }
            }

            @Override
            public void onFinished() {
                mainListener.onFinished();
            }

        });
    }

    @Override
    public void connectNote(String host, String shareID) {
        ClientSocketListener mainListener = this;

        currentDocBinding = new CRDTDocument();
        currentDoc = new GCCRDT(agent, currentDocBinding, this);
        currentDocBinding.setCrdt(currentDoc);

        this.shareID = shareID;
        frame.newEditorPanel(this);

        clientSocket = new ClientSocket(host, agent, new ClientSocketListener() {
            boolean isReady = false;

            @Override
            public void onStart() {
                clientSocket.sendData(new DataPayload(Type.CONNECT, shareID, null, 0, null));
                mainListener.onStart();
            }

            @Override
            public void onReceiveData(DataPayload data) {
                if (isReady || data.getType() == Type.INSERT || data.getType() == Type.DELETE)
                    mainListener.onReceiveData(data);

                if (data.getType() == Type.CONNECT)
                    isReady = true;
            }

            @Override
            public void onFinished() {
                mainListener.onFinished();
            }

        });
    }

    @Override
    public void onStart() {
        // TODO Auto-generated method stub

    }

    @Override
    public void onReceiveData(DataPayload data) {
        switch (data.getType()) {
            case CARET:
                frame.getEditorPanel().updateCaret(data.getAgent(), data.getCaretIndex());
                break;
            case DELETE:
                currentDoc.tryRemoteDelete(data.getCrdtItem());
                break;
            case INSERT:
                currentDoc.tryRemoteInsert(data.getCrdtItem());
                break;
            case DONE:
                break;
            case CONNECT:
            case SHARE:
                break;
            default:
                break;
        }
    }

    @Override
    public void onFinished() {
        newNote();
    }

    @Override
    public void updateCaret(int index) {
        if (clientSocket == null || shareID == null)
            return;

        clientSocket.sendData(DataPayload.caretPayload(shareID, index));
    }

    @Override
    public CRDTDocument getDocument() {
        return this.currentDocBinding;
    }

    @Override
    public void printCRDT() {
        currentDoc.serialize();
        // for (CRDTItemSerializable crdtItem : currentDoc.serialize()) {
        //     if (crdtItem.isDeleted)
        //         continue;
        //     System.out.print(crdtItem.content);
        // }
        // System.out.println();
    }

    @Override
    public void afterLocalCRDTInsert(CRDTItem item) {
        if (clientSocket == null || shareID == null)
            return;

        clientSocket.sendData(DataPayload.insertPayload(shareID, item.serialize()));
    }

    @Override
    public void afterLocalCRDTDelete(List<CRDTItem> item) {
        if (clientSocket == null || shareID == null)
            return;

        for (CRDTItem i : item) {
            clientSocket.sendData(DataPayload.deletePayload(shareID, i.serialize()));
        }
    }

    // @Override
    // public void insertCRDT(int offset, String changes) {
    // CRDTItem crdtItem = currentDoc.localInsert(agent, offset, changes);
    // if (clientSocket == null || shareID == null)
    // return;

    // clientSocket.sendData(DataPayload.insertPayload(shareID, crdtItem));
    // }

    // @Override
    // public void deleteCRDT(int offset) {
    // CRDTItem crdtItem = currentDoc.localDelete(agent, offset);
    // if (clientSocket == null || shareID == null)
    // return;

    // clientSocket.sendData(DataPayload.deletePayload(shareID, crdtItem));
    // }

    // @Override
    // public void printCRDT() {
    // for (CRDTItem item : currentDoc.returnCopy()) {
    // System.out.println(item.toString() + ", ");
    // }
    // System.out.println();
    // }

    // @Override
    // public CRDT getCRDT() {
    // return this.currentDoc;
    // }

    // @Override
    // public void onCRDTInsert(CRDTItem item) {
    // try {
    // frame.getEditorPanel().getModel().asyncInsert(item);
    // } catch (BadLocationException e) {
    // }
    // }

    // @Override
    // public void onCRDTDelete(CRDTItem item) {
    // try {
    // frame.getEditorPanel().getModel().asyncDelete(item);
    // } catch (BadLocationException e) {
    // }
    // }

    // @Override
    // public void onCRDTRemove(CRDTItem[] remove) {
    // // TODO Auto-generated method stub

    // }
}
